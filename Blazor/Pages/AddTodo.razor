@page "/AddTodo"
@using Domain.Models
@using Domain.Contracts
@using UIElements
@inject ITodoHome TodoHome
@inject NavigationManager NavMgr

<h3>AddTodo</h3>

<div class="box">
<EditForm Model="@newTodoItem" OnValidSubmit="@AddNewTodo">
    <DataAnnotationsValidator/> 
    <ValidationSummary/>
    <div class="form-group">
        <span>
            <label>User Id:</label>
        </span>
        <span>
            <InputNumber @bind-Value="newTodoItem.OwnerId"/>
        </span>
    </div>
    <div class="form-group">
        <span>
            <label>Title:</label>
        </span>
        <span>
            <InputTextArea rows="4" @bind-Value="newTodoItem.Title"/>
        </span>
    </div>
    <p class="actions">
        <button class="btn btn-outline-dark" type="submit">Create</button>
    </p>
</EditForm>
    <label>@errorLabel</label>
    @if (!string.IsNullOrEmpty(errorLabel))
        {
            <label>@errorLabel</label>
        }
        @if (showModal)
        {
            <Modal>
                <p>You have successfully added a new Todo item. You should be very proud of yourself</p>
                <button @onclick="@Proceed">Wonderful</button>
            </Modal>
        }
</div>

@code {
    private Todo newTodoItem = new Todo();
    private string errorLabel = String.Empty;

    private bool showModal;

    private async Task AddNewTodo()
    {
        try
        {
            await TodoHome.AddAsync(newTodoItem);
            showModal = true;
            newTodoItem = new Todo();
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        NavMgr.NavigateTo("/Todos");
    }
    
}